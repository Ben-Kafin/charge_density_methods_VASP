from numpy import shape,zeros,cos,pi,array
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from numpy.linalg import norm
from time import time

from lib import parse_LOCPOT,parse_CHGCAR

def fit_density(ifile,**args):
    if 'filetype' in args:
        filetype=args['filetype']
    else:
        filetype='LOCPOT'
    
    if filetype=='LOCPOT':
        e,lv,coord,atomtypes,atomnums=parse_LOCPOT(ifile)
    else:
        e,lv,coord,atomtypes,atomnums=parse_CHGCAR(ifile)
    dim=shape(e)
    if 'k' in args:
        k=args['k']
        if type(k)==float:
            k=[k,k]
    
    total_fits=dim[1]*dim[2]+dim[0]*dim[2]
    counter=0
    percentage_counter=[25,50,75]
    start=time()
    
    x1=array([[i/(dim[1]-1)*norm(lv[1]) for i in range(dim[1])] for j in range(dim[2])])
    y1=array([[j/(dim[2]-1)*norm(lv[2]) for i in range(dim[1])] for j in range(dim[2])])
    A1=zeros((dim[2],dim[1]))
    phi1=zeros((dim[2],dim[1]))
    y01=zeros((dim[2],dim[1]))
    
    x2=array([[i/(dim[0]-1)*norm(lv[0]) for i in range(dim[0])] for j in range(dim[2])])
    y2=array([[j/(dim[2]-1)*norm(lv[2]) for i in range(dim[0])] for j in range(dim[2])])
    A2=zeros((dim[2],dim[0]))
    phi2=zeros((dim[2],dim[0]))
    y02=zeros((dim[2],dim[0]))
    
    def model_cosine(x,A,phi,y0):
        f=A*cos(phi+x*2*pi)+y0
        return f
    
    #fitting along first lattice vector
    for i in range(dim[2]):
        for j in range(dim[1]):
            tempvar=curve_fit(model_cosine,[k/(dim[0]-1) for k in range(dim[0])],e[:,j,i],p0=[(max(e[:,j,i])-min(e[:,j,i]))/2,0,0])
            A1[i][j]=tempvar[0][0]
            phi1[i][j]=tempvar[0][1]
            y01[i][j]=tempvar[0][2]
            counter+=1
            if round(counter/(total_fits-1)*100)%25==0 and round(counter/(total_fits-1)*100) in percentage_counter:
                    print('{}% finished with fitting. {} s elasped so far'.format(round(counter/(total_fits-1)*100),time()-start))
                    try:
                        percentage_counter.remove(round(counter/(total_fits-1)*100))
                    except ValueError:
                        pass
            
    #fitting along second lattice vector
    for i in range(dim[2]):
        for j in range(dim[0]):
            tempvar=curve_fit(model_cosine,[k/(dim[1]-1) for k in range(dim[1])],e[j,:,i],p0=[(max(e[j,:,i])-min(e[j,:,i]))/2,0,0])
            A2[i][j]=tempvar[0][0]
            phi2[i][j]=tempvar[0][1]
            y02[i][j]=tempvar[0][2]
            counter+=1
            if round(counter/(total_fits-1)*100)%25==0 and round(counter/(total_fits-1)*100) in percentage_counter:
                    print('{}% finished with fitting. {} s elasped so far'.format(round(counter/(total_fits-1)*100),time()-start))
                    try:
                        percentage_counter.remove(round(counter/(total_fits-1)*100))
                    except ValueError:
                        pass
                    
    #plotting of optimized fit parameters
    plt.figure()
    plt.pcolormesh(x1,y1,A1,cmap='jet',shading='nearest')
    plt.xlabel('position along second lattice vector / $\AA$')
    plt.xlabel('position along third lattice vector / $\AA$')
    plt.colorbar()
    plt.show()
    
    plt.figure()
    plt.pcolormesh(x2,y2,A2,cmap='jet',shading='nearest')
    plt.xlabel('position along first lattice vector / $\AA$')
    plt.xlabel('position along third lattice vector / $\AA$')
    plt.colorbar()
    plt.show()
